interface BaseObject {
  _id: ID!
  createdAt: Date!
  updatedAt: Date!
}

type Credentials {
  bookmarklet: String
  rss: String
}

scalar Date

type EntitiesUpdatedSince {
  addedNotes: [Note!]!
  addedTags: [Tag!]!
  cacheId: ID!
  removedNoteIds: [ID!]!
  removedTagIds: [ID!]!
  updatedNotes: [Note!]!
  updatedTags: [Tag!]!
}

interface INote {
  _id: ID!
  archivedAt: Date
  changedAt: Date!
  createdAt: Date!
  deletedAt: Date
  description: String!
  name: String!
  tags: [Tag!]!
  type: NoteType!
  updatedAt: Date!
  user: User!
}

input InputLink {
  _id: ID!
  archivedAt: Date
  description: String
  domain: String
  name: String
  path: String
  updatedAt: Date
  url: String
}

input InputTag {
  _id: ID!
  color: String!
  name: String!
  updatedAt: Date
}

input InputText {
  _id: ID!
  description: String
  name: String
  updatedAt: Date
}

type Link implements BaseObject & INote {
  _id: ID!
  archivedAt: Date
  changedAt: Date!
  createdAt: Date!
  deletedAt: Date
  description: String!
  domain: String!
  name: String!
  path: String!
  tags: [Tag!]!
  type: NoteType!
  updatedAt: Date!
  url: String!
  user: User!
}

type Mutation {
  addTagByNameToNote(name: String!, noteId: ID!): Note!
  createTag(color: String, name: String!): Tag!
  createText(description: String, title: String): Text!
  permanentlyDeleteTag(tagId: ID!): Tag!
  removeTagByIdFromNote(noteId: ID!, tagId: ID!): Note!
  requestNewCredential(purpose: String!): User!
  revokeCredential(purpose: String!): User!
  shareTag(tagId: ID!, username: String!): Tag!
  submitLink(description: String, title: String, url: String!): Link!
  toggleArchivedNote(noteId: ID!): Note!
  toggleDeletedNote(noteId: ID!): Note!
  unshareTag(tagId: ID!, userId: ID!): Tag!
  updateLink(link: InputLink!): Link!
  updatePermissionOnTag(granted: Boolean!, mode: String!, resource: String!, tagId: ID!, userId: ID!): Tag!
  updateTag(tag: InputTag!): Tag!
  updateText(text: InputText!): Text!
}

union Note = Link | Text

enum NoteType {
  LINK
  TEXT
}

type NotesPermissions {
  read: Boolean!
  write: Boolean!
}

type Query {
  currentUser: User
  entitiesUpdatedSince(cacheId: ID): EntitiesUpdatedSince!
  link(linkId: ID): Link!
  links(limit: Int, offset: Int): [Link!]!
  notes(limit: Int, offset: Int): [Note!]!
  tag(tagId: ID): Tag!
  tags(limit: Int, offset: Int): [Tag!]!
  text(textId: ID): Text!
  titleSuggestions(linkId: ID!): [String!]!
  versions(currentVersion: String): Versions!
}

type Tag implements BaseObject {
  _id: ID!
  changedAt: Date!
  color: String!
  createdAt: Date!
  name: String!
  noteCount: Int!
  notes: [Note]
  permissions(onlyMine: Boolean): [UserPermissions!]!
  updatedAt: Date!
  user: User!
}

type TagPermissions {
  read: Boolean!
  share: Boolean!
  use: Boolean!
  write: Boolean!
}

type Text implements BaseObject & INote {
  _id: ID!
  archivedAt: Date
  changedAt: Date!
  createdAt: Date!
  deletedAt: Date
  description: String!
  name: String!
  tags: [Tag!]!
  type: NoteType!
  updatedAt: Date!
  user: User!
}

type User implements BaseObject {
  _id: ID!
  authenticationProvider: String
  createdAt: Date!
  credentials: Credentials
  name: String!
  updatedAt: Date!
}

type UserPermissions {
  notes: NotesPermissions!
  tag: TagPermissions!
  user: User!
}

type Versions {
  current: String!
  minimum: String
  recommended: String @deprecated(reason: "Upgrade to 0.20.0+ and use 'current' field")
}